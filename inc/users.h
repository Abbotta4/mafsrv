#pragma once

// generated by ./ddl2cpp /home/drew/test.sql test mafsrv

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace mafsrv
{
  namespace PublicUsers_
  {
    struct Uid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "uid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uid;
            T& operator()() { return uid; }
            const T& operator()() const { return uid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Joined
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joined";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joined;
            T& operator()() { return joined; }
            const T& operator()() const { return joined; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct GamesPlayed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "games_played";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gamesPlayed;
            T& operator()() { return gamesPlayed; }
            const T& operator()() const { return gamesPlayed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct GamesWon
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "games_won";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gamesWon;
            T& operator()() { return gamesWon; }
            const T& operator()() const { return gamesWon; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace PublicUsers_

  struct PublicUsers: sqlpp::table_t<PublicUsers,
               PublicUsers_::Uid,
               PublicUsers_::Name,
               PublicUsers_::Joined,
               PublicUsers_::GamesPlayed,
               PublicUsers_::GamesWon>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "public.users";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T publicUsers;
        T& operator()() { return publicUsers; }
        const T& operator()() const { return publicUsers; }
      };
    };
  };
} // namespace mafsrv
