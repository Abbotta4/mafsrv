#pragma once


// generated by ./ddl2cpp mafia.ddl users mafsrv

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace mafsrv
{
  namespace PublicPosts_
  {
    struct Pid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pid;
            T& operator()() { return pid; }
            const T& operator()() const { return pid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Author
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "author";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T author;
            T& operator()() { return author; }
            const T& operator()() const { return author; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Content
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "content";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T content;
            T& operator()() { return content; }
            const T& operator()() const { return content; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Created
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T created;
            T& operator()() { return created; }
            const T& operator()() const { return created; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
  } // namespace PublicPosts_

  struct PublicPosts: sqlpp::table_t<PublicPosts,
               PublicPosts_::Pid,
               PublicPosts_::Author,
               PublicPosts_::Content,
               PublicPosts_::Created>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "public.posts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T publicPosts;
        T& operator()() { return publicPosts; }
        const T& operator()() const { return publicPosts; }
      };
    };
  };
  namespace PublicThreads_
  {
    struct Tid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tid;
            T& operator()() { return tid; }
            const T& operator()() const { return tid; }
          };
      };
      //using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace PublicThreads_

  struct PublicThreads: sqlpp::table_t<PublicThreads,
               PublicThreads_::Tid,
               PublicThreads_::Name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "public.threads";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T publicThreads;
        T& operator()() { return publicThreads; }
        const T& operator()() const { return publicThreads; }
      };
    };
  };
  namespace PublicThreadstoposts_
  {
    struct Tid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tid;
            T& operator()() { return tid; }
            const T& operator()() const { return tid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Pid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pid;
            T& operator()() { return pid; }
            const T& operator()() const { return pid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace PublicThreadstoposts_

  struct PublicThreadstoposts: sqlpp::table_t<PublicThreadstoposts,
               PublicThreadstoposts_::Tid,
               PublicThreadstoposts_::Pid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "public.threadstoposts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T publicThreadstoposts;
        T& operator()() { return publicThreadstoposts; }
        const T& operator()() const { return publicThreadstoposts; }
      };
    };
  };
  namespace PublicUsers_
  {
    struct Uid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "uid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uid;
            T& operator()() { return uid; }
            const T& operator()() const { return uid; }
          };
      };
      //using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Username
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "username";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T username;
            T& operator()() { return username; }
            const T& operator()() const { return username; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Joined
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joined";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joined;
            T& operator()() { return joined; }
            const T& operator()() const { return joined; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct GamesPlayed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "games_played";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gamesPlayed;
            T& operator()() { return gamesPlayed; }
            const T& operator()() const { return gamesPlayed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct GamesWon
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "games_won";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gamesWon;
            T& operator()() { return gamesWon; }
            const T& operator()() const { return gamesWon; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PasswordSalt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password_salt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T passwordSalt;
            T& operator()() { return passwordSalt; }
            const T& operator()() const { return passwordSalt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace PublicUsers_

  struct PublicUsers: sqlpp::table_t<PublicUsers,
               PublicUsers_::Uid,
               PublicUsers_::Username,
               PublicUsers_::Joined,
               PublicUsers_::GamesPlayed,
               PublicUsers_::GamesWon,
               PublicUsers_::Password,
               PublicUsers_::PasswordSalt>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "public.users";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T publicUsers;
        T& operator()() { return publicUsers; }
        const T& operator()() const { return publicUsers; }
      };
    };
  };
} // namespace mafsrv
